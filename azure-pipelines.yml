trigger:
  - main

variables:
  sshEndpoint: "training_anil"
  dockerHubBackend: "athakurcovdev/backend"
  dockerHubFrontend: "athakurcovdev/frontend"
  dockerTag: "latest"
  backendContainerName: "backend-container"
  frontendContainerName: "frontend-container"
  backendPort: "5000"
  frontendPort: "3000"

stages:
  - stage: BuildAndPushImages
    displayName: Build & Push Docker Images
    jobs:
      - job: BuildPush
        displayName: Build & Push Docker Images
        pool:
          vmImage: ubuntu-latest
        steps:
          # Docker login
          # - task: Docker@2
          #   displayName: "Login to Docker Hub"
          #   inputs:
          #     command: login
          #     containerRegistry: "DockerHubConnection" # Must exist in your project

          # Build & push backend image
          - task: Docker@2
            displayName: "Build & Push Backend Image"
            inputs:
              containerRegistry: "DockerHubConnection"
              repository: $(dockerHubBackend)
              command: buildAndPush
              Dockerfile: backend/Dockerfile
              tags: $(dockerTag)

          # Build & push frontend image
          - task: Docker@2
            displayName: "Build & Push Frontend Image"
            inputs:
              containerRegistry: "DockerHubConnection"
              repository: $(dockerHubFrontend)
              command: buildAndPush
              Dockerfile: frontend/Dockerfile
              tags: $(dockerTag)

  - stage: DeployToVM
    displayName: Deploy to VM
    dependsOn: BuildAndPushImages
    jobs:
      - job: Deploy
        displayName: Pull Images & Run Containers
        pool:
          vmImage: ubuntu-latest
        steps:
          # Pull latest images from Docker Hub
          - task: SSH@0
            inputs:
              sshEndpoint: "$(sshEndpoint)"
              runOptions: "inline"
              inline: |
                # Clean old containers if any
                      # docker rm -f mysql || true
                      # docker rm -f $(backendContainerName) || true
                      # docker rm -f $(frontendContainerName) || true

                      # Pull images
                      docker pull mysql:8.0
                      docker pull $(dockerHubBackend):$(dockerTag)
                      docker pull $(dockerHubFrontend):$(dockerTag)

                      # Run MySQL
                      docker run -d \
                        --name mysql \
                        --restart always \
                        -e MYSQL_ROOT_PASSWORD=$(mysqlRootPassword) \
                        -e MYSQL_DATABASE=taskdb \
                        -e MYSQL_USER=appuser \
                        -e MYSQL_PASSWORD=$(mysqlPassword) \
                        -v mysql_data:/var/lib/mysql \
                        -v /home/ubuntu/athakur/init.sql:/docker-entrypoint-initdb.d/init.sql \
                        mysql:8.0

                      # Run backend & frontend
                      docker run -d --name $(backendContainerName) -p $(backendPort):$(backendPort) $(dockerHubBackend):$(dockerTag)
                      docker run -d --name $(frontendContainerName) -p $(frontendPort):$(frontendPort) $(dockerHubFrontend):$(dockerTag)
              readyTimeout: "20000"
